# # Do not modify this file!  It was generated by ‘nixos-generate-config’
# # and may be overwritten by future invocations.  Please make changes
# # to /etc/nixos/configuration.nix instead.
# { config, lib, pkgs, modulesPath, ... }:
# {
#   imports =
#     [
#       (modulesPath + "/profiles/qemu-guest.nix")
#       ./disk-config.nix
#     ];
#   boot.loader = {
#     grub = {
#       enable = true;
#       devices = [ "/dev/vda" ];
#       efiSupport = true;
#       efiInstallAsRemovable = true;
#     };
#     timeout = 10;
#   };
#   boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" "sr_mod" ];
#   boot.initrd.kernelModules = [ ];
#   # boot.kernelModules = [ "kvm-amd" ];
#   boot.extraModulePackages = [ ];
#   # fileSystems."/" =
#   #   {
#   #     device = "/dev/disk/by-uuid/96961cea-6008-4232-854f-51b5895130fe";
#   #     fsType = "ext4";
#   #   };
#   # swapDevices =
#   #   [{ device = "/dev/disk/by-uuid/69958a46-8fa9-4a5b-9b00-eab8189edd8b"; }];
#   # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
#   # (the default) this is the recommended approach. When using systemd-networkd it's
#   # still possible to use this option, but it's recommended to use it in conjunction
#   # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
#   networking.useDHCP = lib.mkDefault true;
#   # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;
#   nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
# }
{ config, lib,  ... }:
let primaryDisk = "/dev/vda"; in {

  imports = [
    # disko.nixosModules.disko
  ];

  # disko.devices.disk.main = {
  #   type = "disk";
  #   device = primaryDisk;
  #   content = {
  #     type = "table";
  #     format = "gpt";
  #     partitions = [
  #       {
  #         name = "boot";
  #         start = "0";
  #         end = "1M";
  #         flags = [ "bios_grub" ];
  #       }
  #       {
  #         name = "ESP";
  #         start = "1M";
  #         end = "512M";
  #         bootable = true;
  #         content = {
  #           type = "filesystem";
  #           format = "vfat";
  #           mountpoint = "/boot";
  #         };
  #       }
  #       {
  #         name = "nixos";
  #         start = "512M";
  #         end = "100%";
  #         content = {
  #           type = "filesystem";
  #           format = "ext4";
  #           mountpoint = "/";
  #         };
  #       }
  #     ];
  #   };
  # };

  disko.devices = {
    disk = {
      main = {
        type = "disk";
        device = primaryDisk;
        content = {
          type = "gpt";
          partitions = {
            boot = {
              priority = 1;
              size = "1M";
              type = "EF02";
            };
            ESP = {
              size = "512M";
              type = "EF00";
              content = {
                type = "filesystem";
                format = "vfat";
                mountpoint = "/boot";
              };
            };
            root = {
              size = "100%";
              content = {
                type = "filesystem";
                format = "ext4";
                mountpoint = "/";
              };
            };
          };
        };
      };
    };
  };

  boot.loader = {
    grub = {
      enable = true;
      devices = [ primaryDisk ];
      efiSupport = true;
      efiInstallAsRemovable = true;
    };
    timeout = 10;
  };

  # enable the qemu guest agent
  services.qemuGuest.enable = true;

  boot.binfmt.emulatedSystems = [ "aarch64-linux" ];
  boot.initrd.availableKernelModules = [
    "ahci"
    "ata_piix"
    "nvme"
    "sd_mod"
    "sr_mod"
    "uhci_hcd"
    "usb_storage"
    "usbhid"
    "virtio_blk"
    "virtio_pci"
    "xhci_pci"
  ];
  boot.kernelModules = [ "kvm-intel" ];

  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  hardware.enableRedistributableFirmware = config.nixpkgs.config.allowUnfree;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";

}
