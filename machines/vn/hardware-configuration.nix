# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }: {
  imports = [ (modulesPath + "/profiles/qemu-guest.nix") ./disk-config.nix ];
  services.qemuGuest.enable = true;
  boot = {
    loader = {
      grub = {
        enable = true;
        devices = [ "/dev/vda" ];
        efiSupport = true;
        efiInstallAsRemovable = true;
      };
      timeout = 10;
    };
    binfmt.emulatedSystems = [ "aarch64-linux" ];
    initrd.availableKernelModules = [
      "ahci"
      "ata_piix"
      "nvme"
      "sd_mod"
      "sr_mod"
      "uhci_hcd"
      "usb_storage"
      "usbhid"
      "virtio_blk"
      "virtio_pci"
      "xhci_pci"
    ];
    kernelModules = [ "kvm-intel" ];
    # boot.kernelModules = [ "kvm-amd" ];
    extraModulePackages = [ ];
  };
  hardware.cpu.intel.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;
  hardware.enableRedistributableFirmware = config.nixpkgs.config.allowUnfree;
  # fileSystems."/" =
  #   {
  #     device = "/dev/disk/by-uuid/96961cea-6008-4232-854f-51b5895130fe";
  #     fsType = "ext4";
  #   };
  # swapDevices =
  #   [{ device = "/dev/disk/by-uuid/69958a46-8fa9-4a5b-9b00-eab8189edd8b"; }];
  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
